syntax="proto2";

package raft;
option java_package = "ProtoBuf";
option java_outer_classname = "RaftCore";

// Define Server for cluster configuration
message ServerAddress {
    optional string host = 1;
    optional uint32 port = 2;
}

message Server {
    optional uint32 server_id = 1;
    optional ServerAddress server_address = 2;
}

message Cluster {
    repeated Server servers = 1;
}

// Define entity for Entity.StateMachine and appendEntriesRPC method
message LogEntry {
    optional uint64 term = 1;
    optional uint64 index = 2;
    optional string command = 3;
};

// Define RPC
// Voting initiated by Candidate
message RpcRequestVote {
    optional uint64 candidate_term = 1; // candidate’s term
    optional uint32 candidate_id = 2; // candidate requesting vote
    optional uint64 last_log_index = 3; // index of candidate’s last log entry
    optional uint64 last_log_term = 4; // term of candidate’s last log entry

};

message RspRequestVote {
    optional uint64 current_term = 1; // currentTerm, for candidate to update itself
    optional bool vote_granted = 2; // true means candidate received vote
};

// AppendEntries/Heartbeat initiated by Leader
message RpcAppendEntries {
    optional uint64 leader_term = 1; // leader’s term
    optional uint32 leader_id = 2; // so follower can redirect clients
    optional uint64 prev_log_index = 3; // index of log entry immediately preceding new ones
    optional uint64 prev_log_term = 4; // term of prevLogIndex entry
    repeated LogEntry log_entries = 5; // log entries to store (empty for heartbeat may send more than one for efficiency)
    optional uint64 leader_commit = 6; // leader’s commitIndex
};

message RspAppendEntries {
    optional uint64 current_term = 1; // currentTerm, for leader to update itself
    optional bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
};